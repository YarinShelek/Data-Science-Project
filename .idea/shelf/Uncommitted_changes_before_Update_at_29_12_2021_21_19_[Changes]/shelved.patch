Index: crawl.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from selenium import webdriver\r\nimport time\r\nfrom selenium.webdriver.common.by import By\r\nimport pandas as pd\r\nfrom datetime import datetime\r\nimport random\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\n### selenium set-up\r\ndriver = webdriver.Firefox()\r\nurl = \"https://u.gg/leaderboards/ranking?region=euw1\"\r\ndriver.get(url)\r\npage = 0 #CHANGE TO CHANGE CRAWLING PAGE\r\ntime.sleep(5) #wait for the page to load\r\ncurr_player = -1\r\n### end selenium set-up\r\nwhile True:\r\n    try:\r\n        ### get player-list (in page)\r\n        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, \"summoner\")))\r\n        curr_player += random.randint(1, 6) #increase players search number randomly (1-5)\r\n        players_list = driver.find_elements(By.CLASS_NAME, \"summoner\") #get all players in page\r\n\r\n        ### end get player-list\r\n        ##deal with ads\r\n        ads = driver.find_elements(By.ID, \"desktop-anchor-close\") #find ads\r\n        if len(ads) > 0:\r\n            for ad in range(len(ads)):\r\n                ads[ad].click() #close ad\r\n        ### end deal with ads\r\n\r\n        ###enter player page\r\n        if curr_player < len(players_list):\r\n            players_list[curr_player].click() #enter player number i page\r\n            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, \"flex-center\"))) #wait for page to load\r\n            #^^from selenium docs, \"how to use explicit wait\", wait for element to load... is said to be faster than time.sleep()\r\n            players_stats = {} # stats dict\r\n\r\n            #check if u.gg is trolling us:\r\n            player_not_found = driver.find_elements(By.CLASS_NAME, \"white-bold\")\r\n            if player_not_found:\r\n                if \"Oh no! We couldn't find summoner\" in player_not_found[0].text:\r\n                    driver.back()\r\n                    time.sleep(10)\r\n                    continue\r\n\r\n            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, \"update-button\"))) #wait for page to load\r\n            rank = driver.find_element(By.CLASS_NAME, \"rank-text\").find_element(By.TAG_NAME, \"strong\").text  #get his ranking info\r\n            players_stats[\"Rank\"] = rank\r\n            #ranking\r\n\r\n        #stats page\r\n            ### get his stats\r\n            stats = driver.find_elements(By.CLASS_NAME, \"nav-tab-link\")\r\n            stats[1].click() #get to stats page\r\n            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, \"champion-rates\"))) #wait for page to load\r\n            ads = driver.find_elements(By.ID, \"desktop-anchor-close\") #find ads\r\n            if len(ads) > 0:\r\n                for ad in range(len(ads)):\r\n                    ads[ad].click()\r\n            #w/r\r\n            WinRate = driver.find_elements(By.CLASS_NAME, \"champion-rates\") #w/r + games\r\n            if len(WinRate) > 0:\r\n                win_rate = WinRate[0].text.split(\"/\")[0].split(\"%\")[0] #w/r\r\n                win = WinRate[0].text.split(\"/\")[1].split(\"W\")[0] #wins\r\n                loss = WinRate[0].text.split(\"/\")[1].split(\"W\")[1].split(\"L\")[0] #losses\r\n                games = int(win)+int(loss)\r\n                players_stats[\"WinRate\"] = int(win_rate)\r\n                players_stats[\"Games\"] = games\r\n            else: #player has the weird no-info bug on his stat page (very rare, happened once in many players we checked)\r\n                driver.back()\r\n                driver.back()\r\n                time.sleep(10) #wait for page to load. as this happens VERY rarely and in uncertain situations, we will not be using explicit waits here.\r\n                continue\r\n            #kda\r\n            kda_stats = driver.find_elements(By.CLASS_NAME, \"kda\")[0].find_elements(By.TAG_NAME, \"strong\")\r\n            players_stats[\"KDA\"] = float(kda_stats[0].text)\r\n            players_stats[\"AVG_kills\"] = float(kda_stats[1].text)\r\n            players_stats[\"AVG_deaths\"] = float(kda_stats[2].text)\r\n            players_stats[\"AVG_assists\"] = float(kda_stats[3].text)\r\n            #cs\r\n            players_stats[\"Creep_Score\"] = float(driver.find_elements(By.CLASS_NAME, \"cs-cell\")[1].text)\r\n\r\n            #damage\r\n            dmg = driver.find_elements(By.CLASS_NAME, \"damage-cell\")[1].text\r\n            if \",\" in dmg:\r\n                dmg = dmg.split(\",\")\r\n                players_stats[\"Damage\"] = int(dmg[0] + dmg[1])\r\n            else:\r\n                players_stats[\"Damage\"] = int(dmg) #apparently some ppl have below 1k dmg/gold per game. we won't be using them, but need to filter them to not crash the crawling.\r\n            #gold\r\n            gold = driver.find_elements(By.CLASS_NAME, \"gold-cell\")[1].text\r\n            if \",\" in gold:\r\n                gold = gold.split(\",\")\r\n                players_stats[\"Gold\"] = int(gold[0]+gold[1])\r\n            else:\r\n                gold = int(gold)\r\n            #multi-kill\r\n            players_stats[\"Multi_Kill\"] = 0\r\n\r\n            for kill in range(4): #combine the 4 multi kill types into 1 multi-kill\r\n                if driver.find_elements(By.CLASS_NAME, \"multikill-cell\")[kill+4].text != \"â€”\": #needs to be kill+4\r\n                    multis = driver.find_elements(By.CLASS_NAME, \"multikill-cell\")[kill+4].text\r\n                    if len(multis) > 3:\r\n                        multis = multis.split(\",\")\r\n                        multis = int(multis[0]+multis[1])\r\n                    players_stats[\"Multi_Kill\"] += int(multis)\r\n\r\n            df = pd.DataFrame([players_stats])\r\n            data += 1\r\n            print(df)\r\n            with open(\"Data3.csv\", \"a\") as file:\r\n                df.to_csv(file, index=False, header=False)\r\n\r\n            driver.back()\r\n            driver.back()\r\n        #end player page, go to next player\r\n        if curr_player >= len(players_list): #check if done with page\r\n            if page <= 10:\r\n                page += 1\r\n            if page <= 20:\r\n                page +=2\r\n            elif page <= 100:\r\n                page += 4\r\n            elif page <= 1000:\r\n                page += 100\r\n            elif page <= 10000:\r\n                page += 150\r\n            elif page <= 20000:\r\n                page += 200\r\n            else:\r\n                page += 330\r\n\r\n            now = datetime.now()\r\n            current_time = now.strftime(\"%H:%M:%S\")  # https://www.programiz.com/python-programming/datetime/current-time\r\n\r\n            print(f\"going to page {page} at {current_time}\")\r\n            driver.get(url+f\"&page={page}\")\r\n            curr_player = -1\r\n\r\n        stop = driver.find_elements(By.CLASS_NAME, \"content-section leaderboard_table_error\") #check for no-content error (means we are overflowing players pages, no content left)\r\n        if stop != []:\r\n            break\r\n\r\n    except Exception as e:\r\n        time.sleep(5)\r\n        driver.refresh()\r\n        driver.back()\r\n        time.sleep(1)\r\n        continue\r\ndriver.close()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crawl.py b/crawl.py
--- a/crawl.py	(revision 516934e6d0a777dd2d28af381dbf44bde62dfc0e)
+++ b/crawl.py	(date 1640805575698)
@@ -49,7 +49,7 @@
             players_stats["Rank"] = rank
             #ranking
 
-        #stats page
+            #stats page
             ### get his stats
             stats = driver.find_elements(By.CLASS_NAME, "nav-tab-link")
             stats[1].click() #get to stats page
